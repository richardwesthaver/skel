#+TITLE: skel
#+DESCRIPTION: project skeletons
* Overview 
+ status :: WIP
+ forge :: [[https://lab.rwest.io/ellis/skel][Heptapod]]
+ mirror :: [[https://github.com/richardwesthaver/skel][Github]]

This system provides functions and macros for building and deploying
project skeletons. /This is not a general purpose templating
system/. It is specifically for software projects which are likely
under version control, may be shared some day, and are made by yours
truly.

** Goals
- vaporize boilerplate code and docs
- integrate reasonably well with my tools (Emacs/etc)
- tree description of projects (nested sexps)
** Resources
- [[https://www.gnu.org/software/emacs/manual/html_node/autotype/Skeleton-Language.html][skeleton-lanaguage (emacs)]]
- [[https://github.com/emacs-mirror/emacs/tree/master/lisp/cedet/ede][cedet/ede (emacs)]]
- [[https://www.gnu.org/software/make/manual/make.html][GNU make]]
- [[https://docs.factorcode.org/content/article-vocabularies.html][Factor (forth) definitions]]
* Quickstart
Make sure you have sbcl installed:
#+begin_src shell :results pp
sbcl --version
#+end_src

#+RESULTS:
: SBCL 2.3.7

Then compile the program. This command produces a binary called =skel=
in the project root:
#+begin_src shell :results pp
sbcl --noinform  --non-interactive --eval '(ql:quickload :skel)' --eval '(asdf:make :skel/cli)'
#+end_src

#+RESULTS:
#+begin_example
To load "skel":
  Load 1 ASDF system:
    skel
; Loading "skel"
...
compressed 32768 bytes into 634 at level 9
compressed 25460736 bytes into 4654694 at level 9
compressed 8060928 bytes into 2550706 at level 9
compressed 2162688 bytes into 536454 at level 9
compressed 12976128 bytes into 3308675 at level 9
#+end_example

Run the binary without any args, which will print a skeleton of the
current project directory (=*sk-project*=).

#+begin_src shell :results pp
./skel
#+end_src

#+RESULTS:
#+begin_example
#<SKEL ID=NIL>

#<SK-PROJECT TYPE=NIL, RULES=NIL, DOCUMENTS=NIL, SCRIPTS=NIL, SNIPPETS=NIL, ABBREVS=NIL, ID=NIL>

#<SK-SOURCE ID=NIL>

#<SK-TARGET ID=NIL>

#<SK-RECIPE COMMANDS=NIL, ID=NIL>

#<SK-RULE TARGET=NIL, SOURCE=NIL, RECIPE=NIL, ID=NIL>

#<SK-DOCUMENT ID=NIL>

#<SK-SCRIPT ID=NIL>

#<SK-CONFIG ID=NIL>

#<SK-SNIPPET ID=NIL>

#<SK-ABBREV ID=NIL>

#+end_example

* API
- CLOS-based core classes
- EIEIO-based wrapper classes
#+begin_src dot :file api.svg :exports results
  digraph { splines=true; label="CLOS API"; labelloc="t"; node [shape=record];
    sk [label="(skel :ID :AST)"]
    methods [label="(sk-compile sk-expand sk-build\nsk-run sk-init sk-new sk-save\nsk-tangle sk-weave sk-call sk-print)"]
    skmet [label="(sk-meta :NAME :PATH :VERSION :DESCRIPTION)"]
    skcmd [label="(sk-command)"]
    sktar [label="(sk-target)"]
    sksrc [label="(sk-source)"]
    skrec [label="(sk-recipe :COMMANDS)"]
    skrul [label="(sk-rule :TARGET :SOURCE :RECIPE)"]
    skdoc [label="(sk-document)"]
    skscr [label="(sk-script)"]
    skcfg [label="(sk-config)"]
    sksni [label="(sk-snippet)"]    
    skabb [label="(sk-abbrev)"]
    skpro [label="(sk-project\l:RULES\l:DOCUMENTS\l:SCRIPTS\l:SNIPPETS\l:ABBREVS)\l"]
    sk -> skmet
    sk -> skcfg
    sk -> sksni
    sk -> skabb
    sk -> sktar
    sk -> skrul
    sk -> sksrc
    sk -> skcmd
    skmet -> skpro
    skmet -> skdoc    
    skmet -> skscr    
    skrul -> skpro
    skscr -> skpro
    skdoc -> skpro
    sksni -> skpro
    skabb -> skpro
    sktar -> skrul
    sksrc -> skrul
    skrec -> skrul
    skcmd -> skrec
  }
#+end_src

#+RESULTS:
[[file:api.svg]]
