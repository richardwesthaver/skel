#+TITLE: skel
#+DESCRIPTION: project skeletons
* Overview 
+ status :: WIP
+ forge :: [[https://lab.rwest.io/ellis/skel][Heptapod]]
+ mirror :: [[https://github.com/richardwesthaver/skel][Github]]

This system provides functions and macros for building and deploying
project skeletons. /This is not a general purpose templating
system/. It is specifically for software projects which are likely
under version control, may be shared some day, and are made by yours
truly.

Skel is intend to be run like so:

#+begin_src sh
skel base
#+end_src

you can replace =base= with any valid name for a =skeleton= object
instance.

#+name: artist-depiction
#+begin_src artist
              .7
            .'/
           / /
          / /
         / /
        / /
       / /
      / /
     / /         
    / /          
  __|/
,-\__\
|f-"Y\|
\()7L/
 cgD                            __ _
 |\(                          .'  Y '>,
  \ \                        / _   _   \
   \\\                       )(_) (_)(|}
    \\\                      {  4A   } /
     \\\                      \uLuJJ/\l
      \\\                     |3    p)/
       \\\___ __________      /nnm_n//
       c7___-__,__-)\,__)(".  \_>-<_/D
                  //V     \_"-._.__G G_c__.
                         <"-._>__-,G_.___)\  
                        ("-.__.| \"<.__.-" ) 
                        |"-.__"\  |"-.__.-".\
                        ("-.__"". \"-.__.-".|
                        \"-.__""|!|"-.__.-".)
                         "-.__""\_|"-.__.-"./
#+end_src

- Goals ::
  - vaporize boilerplate code and docs
  - integrate reasonably well with my tools (Emacs/etc)
  - tree description of projects (nested sexps)
- Non-Goals ::
  - dependency management
  - speed
** resources
- [[https://www.gnu.org/software/emacs/manual/html_node/autotype/Skeleton-Language.html][skeleton-lanaguage (emacs)]]
- [[https://github.com/emacs-mirror/emacs/tree/master/lisp/cedet/ede][cedet/ede (emacs)]]
- [[https://www.gnu.org/software/make/manual/make.html][GNU make]]
* Quickstart
#+begin_src shell :results silent
sbcl --non-interactive --eval '(ql:quickload :skel)' --eval '(asdf:make :skel/cli)'
#+end_src
* API
- CLOS-based core classes
- EIEIO-based wrapper classes
#+begin_src dot :file api.svg :exports results
  digraph { splines=true; label="CLOS API"; labelloc="t"; node [shape=record];
    sk [label="(skel :ID :AST)"]
    methods [label="(sk-compile sk-expand sk-build\nsk-run sk-init sk-new sk-save\nsk-tangle sk-weave sk-call sk-print)"]
    skpro [label="(sk-project :RULES :)"]
    sksrc [label="(sk-source)"]
    sktar [label="(sk-target)"]
    skcmd [label="(sk-command)"]
    skrec [label="(sk-recipe :COMMANDS)"]
    skrul [label="(sk-rule :TARGET :SOURCE :RECIPE)"]
    skdoc [label="(sk-document)"]
    sksni [label="(sk-snippet)"]
    skcfg [label="(sk-config)"]
    sk -> skpro
    sk -> skdoc
    sk -> sksni
    sk -> skcfg
    skpro -> skrul
    skrul -> sktar
    skrul -> sksrc
    skrul -> skrec
    skrec -> skcmd
  }
#+end_src

#+RESULTS:
[[file:api.svg]]
